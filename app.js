/*
  app.js -- This creates an Express webserver with login/register/logout authentication
*/

// *********************************************************** //
//  Loading packages to support the server
// *********************************************************** //
// First we load in all of the packages we need for the server...
const createError = require("http-errors"); // to handle the server errors
const express = require("express");
const path = require("path");  // to refer to local paths
const cookieParser = require("cookie-parser"); // to handle cookies
const session = require("express-session"); // to handle sessions using cookies
const debug = require("debug")("personalapp:server"); 
const layouts = require("express-ejs-layouts");

const axios = require("axios");


// *********************************************************** //
//  Loading models
// *********************************************************** //
const Book = require("./models/Book.js")
const WishList = require("./models/WishList.js")

// *********************************************************** //
//  Loading JSON datasets
// *********************************************************** //
const books = require('./public/data/books.json')

// *********************************************************** //
//  Connecting to the database
// *********************************************************** //

const mongoose = require( 'mongoose' );
const mongodb_URI = 'mongodb+srv://sulei:randeisSpr22@cs103a-cpa02.6foat.mongodb.net/bookSearch?retryWrites=true&w=majority'

mongoose.connect( mongodb_URI, { useNewUrlParser: true, useUnifiedTopology: true } );
// fix deprecation warnings
mongoose.set('useFindAndModify', false); 
mongoose.set('useCreateIndex', true);

const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {console.log("we are connected!!!")});


// *********************************************************** //
// Initializing the Express server 
// This code is run once when the app is started and it creates
// a server that respond to requests by sending responses
// *********************************************************** //
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");



// this allows us to use page layout for the views 
// so we don't have to repeat the headers and footers on every page ...
// the layout is in views/layout.ejs
app.use(layouts);

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling using cookies
app.use(
  session({
    secret: "zzbbyanana789sdfa8f9ds8f90ds87f8d9s789fds", // this ought to be hidden in process.env.SECRET
    resave: false,
    saveUninitialized: false
  })
);

// *********************************************************** //
//  Defining the routes the Express server will respond to
// *********************************************************** //


// here is the code which handles all /login /signin /logout routes
const auth = require('./routes/auth');
const { deflateSync } = require("zlib");
app.use(auth)

// middleware to test is the user is logged in, and if not, send them to the login page
const isLoggedIn = (req,res,next) => {
  if (res.locals.loggedIn) {
    next()
  }
  else res.redirect('/login')
}

// specify that the server should render the views/index.ejs page for the root path
// and the index.ejs code will be wrapped in the views/layouts.ejs code which provides
// the headers and footers for all webpages generated by this app
app.get("/", (req, res, next) => {
  res.render("index");
});

app.get("/about", (req, res, next) => {
  res.render("about");
});


/* ************************
  Loading (or reloading) the data into a collection
   ************************ */
// this route loads in the books into the Book collection
// or updates the books if it is not a new collection

app.get('/upsertDB',
  async (req,res,next) => {
    //await Course.deleteMany({})
    for (book of books){
      const {isbn,title,author,rating,description, price}=book;
      await Book.findOneAndUpdate({isbn,title,author,rating,description, price},book,{upsert:true})
    }
    const num = await Book.find({}).count();
    res.send("data uploaded: "+num)
  }
)

app.post('/books/search',
  async (req,res,next) => {
    const{title, author,isbn}=req.body;
    const response = await axios.get("https://www.googleapis.com/books/v1/volumes?q=intitle:"+title+"+inauthor:"+author+"+isbn:"+isbn+"&fields=items(volumeInfo/title,volumeInfo/authors,volumeInfo/imageLinks/thumbnail,volumeInfo/description)&key=AIzaSyCHHEgq0mIyVMNNmnUqoXIIWcdKRjdNOoU")
    res.locals.titleRes=response.data.items.map(x => x['volumeInfo']['title'])
    res.locals.authorRes=response.data.items.map(x => x['volumeInfo']['authors'])
    res.locals.descriptionRes=response.data.items.map(x => x['volumeInfo']['description'])
    res.locals.imageRes=response.data.items.map(x => x['volumeInfo']['imageLinks']['thumbnail'])
    if(checkNested(response.data.items,"volumeInfo","imageLinks","thumbnail")){
      res.locals.imageRes=response.data.items.map(x => x['volumeInfo']['imageLinks']['thumbnail'])
    }
    console.log(res.locals.image)
    res.render('booklist')
  })

app.post('/books/search/book',
  async (req,res,next) => {
    const {isbn}=req.body.view;
    console.log(isbn)
    try {
   
      const response = await axios.get('https://www.googleapis.com/books/v1/volumes?q=isbn:'+{isbn}+'&key=AIzaSyCHHEgq0mIyVMNNmnUqoXIIWcdKRjdNOoU')
      const results = JSON.parse(response)
      if(results.totalItems){
        var book = results.items[0];
        if(book['volumeInfo']["readingModes"]["image"]){
          res.locals.image=book['volumeInfo']['imageLinks']['smallThumbnail']
        }
      }
      
      console.log(req.body)
      res.render('booklist')
      
    } catch (error) {
      next(error)     
    }
  }
)
app.post('/books/byTitle',
  // show list of courses in a given subject
  async (req,res,next) => {
    const {title} = req.body;
    const books = await Book.find({
      $and:[
        {title:new RegExp(title, 'i')}.sort({rating:-1,price:1}),
        {author:new RegExp(author, 'i')}.sort({rating:-1,price:1})

      ]
  })
  res.locals.books = books
  res.render('booklist')
  }
)
app.post('/books/byAuthor',
  // show list of courses in a given subject
  async (req,res,next) => {
    const {author} = req.body;
    const books = await Book.find({author:new RegExp(author, 'i')}).sort({rating:-1,price:1})
    res.locals.books = books
    console.log(books)
    res.render('booklist')
  }
)
app.post('/books/byRating',
  // show list of courses in a given subject
  async (req,res,next) => {
    res.locals.rating=req.body.rating
    const books = await Book.find({rating:{$gt:req.body.rating}}).sort({rating:1,price:1})
    res.locals.books = books
    console.log(req.body.rating)
    res.render('booklist')
  }
)

app.post('/books/byPrice',
  // show list of courses in a given subject
  async (req,res,next) => {
    const {price} = req.body;
    const books = await Book.find({price:{$lt:price}})
    res.locals.books = books
    console.log(price)
    res.render('booklist')
  }
)
app.get('/books/show/:id',
  // show all info about a course given its courseid
  async (req,res,next) => {
   
    const book = await Book.findOne({_id:req.params.id})
    res.locals.book = book
    // res.locals.times2str = times2str
    //res.json(course)
    res.render('book')
  }
)
app.get('/addBook/:id',
  // add a course to the user's schedule
  async (req,res,next) => {
    try {
      const _id = req.params.id
      const userId = res.locals.user
      // check to make sure it's not already loaded
      const lookup = await WishList.findOne({_id,userId})
      if (lookup.length==0){
        const wishlist = new WishList({_id,userId})
        await wishlist.save()
      }
      res.redirect('/wishlist/show')
    } catch(e){
      next(e)
    }
  })
  app.get('/book/remove/:ISBN',
  // remove a course from the user's schedule
  async (req,res,next) => {
    try {
      await WishList.remove(
                {userId:res.locals.user,
                 ISBN:req.params.ISBN})
      res.redirect('/book/show')

    } catch(e){
      next(e)
    }
  }
)
app.get('/wishlist/show',
  // show the current user's schedule
  async (req,res,next) => {
    try{
      const userId = res.locals.user;
      const id = 
         (await WishList.find({userId}))
                        .map(x => x._id)
      res.locals.books = await Book.find({_id:{$in: id}})
      res.render('wishlist')
    } catch(e){
      next(e)
    }
  }
)
// *********************************************************** //
//  Starting up the server!
// *********************************************************** //
//Here we set the port to use between 1024 and 65535  (2^16-1)
const port = "5000";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const server = http.createServer(app);

server.listen(port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
function checkNested(obj /*, level1, level2, ... levelN*/) {
  var args = Array.prototype.slice.call(arguments, 1);

  for (var i = 0; i < args.length; i++) {
    if (!obj || !obj.hasOwnProperty(args[i])) {
      return false;
    }
    obj = obj[args[i]];
  }
  return true;
}
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;